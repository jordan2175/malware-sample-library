#pragma once

#include "core.h"

const int HTTP_Port = 80;

namespace Socket
{

bool Init();
void Release();

//определяет по имени хоста его айпи адрес
//возвращает ip или 0, если ошибка
char* HostToIP( const char* host, char* ip );
//соединение по айпи адресу
int ConnectIP( const char* ip, int port );
//соединение по хосту
int ConnectHost( const char* host, int port = 80 );
//отправка данных в сокет, возвращает количество отправленных данных, или -1 - если ошибка
int Write( int sc, const void* data, int c_data );
//чтение данных из сокета, sz_data - размер буфера data
//wait - время ожидания данных в миллисекундах
//возвращает >0 количество считанных данных, = 0 - сокет закрыт удаленной стороной, <0 - ошибка
int Read( int sc, void* data, int sz_data, int wait = 0 );
//читает из сокета до тех пор пока не будет закрыт удаленной стороной, не выйдет время ожидания или не будет считано max_read байт
//возвращает 0 - ошибка при чтении, 1 - прочли указанное количество данных, возможно есть еще, 2 - прочли все данные, больше данных не будет (соединение закрыто)
//3 - вышло время ожидания
//data - полученные данные, если в data есть данные, то новые будут добавлены
//Если max_read = 0, то считывает до тех пор пока не будет закрыто соединение удаленной стороной или не выйдет время ожидания
//если max_read < 0, возвращает столько данных сколько пришло и не ждет закрытия соединения (сколько пришло в буфер за одно чтение)
int Read( int sc, Mem::Data& data, int max_read, int wait = 0 ); 
void Close( int sc );
//открывает указанный порт на прослушку
int CreateListen( int port );
//ожидает входящего соединия на сокет открытый функцией CreateListen
int Accept( int sc );
//открывает туннель между указанными сокетами, работает в отдельном потоке (пересылает данные между сокетами)
//функция запускает туннель (вызывает LoopTunnel в отдельном потоке) и сразу заканчивает работу.
bool StartTunnel( int s1, int s2 );
//осуществляет обмен данных между сокетами, завершает работу только после того как один из сокетов закроется
void LoopTunnel( int s1, int s2 );

}
